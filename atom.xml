<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Code space]]></title>
  <subtitle><![CDATA[Keep it simple, stupid]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://gingerli.github.io/"/>
  <updated>2016-05-20T06:53:55.000Z</updated>
  <id>http://gingerli.github.io/</id>
  
  <author>
    <name><![CDATA[Ginger Li]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Code snippets, save time]]></title>
    <link href="http://gingerli.github.io/2016/05/19/Code-snippets-save-time/"/>
    <id>http://gingerli.github.io/2016/05/19/Code-snippets-save-time/</id>
    <published>2016-05-19T08:58:19.000Z</published>
    <updated>2016-05-20T06:53:55.000Z</updated>
    <content type="html"><![CDATA[<p>WWDC上Apple的工程师经常在demo的时候拖自己的code snippet，为什么不用completion shortcut，是提醒懒人们多用这功能吗？</p>
<a id="more"></a>
<h3 id="例子：初始化view_controller">例子：初始化view controller</h3><p>习惯新建view controller 同时选择生成同名xib的童鞋，也会经常用以下init选择初始化时候的nib文件。这样写的好处是不管view controller在不在被使用的bundle里，都能随便用。</p>
<pre><code>- (instancetype)init
{
    <span class="keyword">self</span> = [<span class="keyword">super</span> <span class="symbol">initWithNibName:</span>[[<span class="keyword">self</span> <span class="class"><span class="keyword">class</span>] <span class="title">description</span>] <span class="title">bundle</span>:[<span class="title">NSBundle</span> <span class="title">bundleForClass</span>:[<span class="title">self</span> <span class="title">class</span>]]];</span>
    <span class="keyword">if</span> (<span class="keyword">self</span>) {
        ;
    }
    <span class="keyword">return</span> <span class="keyword">self</span>;
}
</code></pre><p>把这段代码拖到code snippet里，再编辑个completion shortcut，如下图：</p>
<p><img src="/img/Code_snippets_save_time/1.png" alt="Example"></p>
<p>以后只要敲initvc，这段代码就可以自动补全了。</p>
<h3 id="同步">同步</h3><p>为了方便在不同机器之间同步和随时更新code snippet(假装很勤劳的样子)<br>在<code>~/Library/Developer/Xcode/UserData/CodeSnippets</code> init一个repo， 放在github上吧。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>WWDC上Apple的工程师经常在demo的时候拖自己的code snippet，为什么不用completion shortcut，是提醒懒人们多用这功能吗？</p>]]>
    
    </summary>
    
      <category term="Xcode" scheme="http://gingerli.github.io/tags/Xcode/"/>
    
      <category term="Development" scheme="http://gingerli.github.io/categories/Development/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Communications between sandbox apps in Mac]]></title>
    <link href="http://gingerli.github.io/2014/11/28/Communications_between_sandbox_apps_in_Mac/"/>
    <id>http://gingerli.github.io/2014/11/28/Communications_between_sandbox_apps_in_Mac/</id>
    <published>2014-11-27T16:44:04.000Z</published>
    <updated>2015-11-17T09:30:26.000Z</updated>
    <content type="html"><![CDATA[<p>由于 Mac 对 Sandbox 的种种限制，使得 Sandb app 间的通信方式与普通 non Sandbox app 间的通信方式有所不同，普通的通信方式，如 <em><code>NSDistributedNotification</code></em>、<em><code>Distributed Objects</code></em>、 <em><code>XPC</code></em> 等不能直接套用到 Sandbox 机制上。</p>
<p>Mac 引入了 <em><code>Sandbox App Group</code></em> 的机制，使得同属于一个 app group 的不同 app 间有了合适的通信方式。</p>
<h3 id="Sandbox_App_Group_是什么">Sandbox App Group 是什么</h3><p>Sandbox App Group 表示由同一个 Developer ID 签名的 app group。每个 Developer ID 可以签名多个 Sandbox App Group，每个 Sandbox App Group 可以包含若干个 Sandbox app。</p>
<p>如果想要声明一个 Sandbox app 属于某个 Sandbox App Group，需要在该 app 的 <em><code>.entitlements</code></em> 中添加一个 <em><code>com.apple.security.application-groups</code></em> array，它的每个元素表示该 app 属于的某个 Sandbox app group，用 Group Bundle ID 表示。</p>
<p><strong><code>Group Bundle ID</code></strong> := <team-id>.com.company.XXX，<team-id> 其实也可以不用，但 Apple 的标准用法是以 <team-id> 作为 Group Bundle ID 的 prefix。</team-id></team-id></team-id></p>
<p>每个 Sandbox App Group 会在 <em><code>~/Library/Group Containers</code></em> 下生成一个对应的目录，以 Group Bundle ID 命名。该目录的结构与 Sandbox app 的 Container 目录结构相同。该目录可以被属于该 group 的所有 Sandbox app 访问，没有限制。访问该目录的方法是调用 <em><code>[[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:]</code></em>。</p>
<a id="more"></a>
<h3 id="Sandbox_App_Group_能够做什么">Sandbox App Group 能够做什么</h3><p>借助 Sandbox App Group，有以下这么几种方式可以用来实现同 group 下的 app 间的通信。</p>
<h4 id="1-_NSUserDefaults">1. NSUserDefaults</h4><p>对于单个 Sandbox app 来说，它的 <em><code>NSUserDefaults</code></em> 只能由自己访问，别的 Sandbox app 无法访问。而有了 Sandbox App Group，每个 group 可以拥有自己的 <em><code>NSUserDefaults</code></em>，而它是可以被下属的所有 Sandbox app 共享访问的。</p>
<ul>
<li><p>创建 Group User Defaults</p>
<pre><code>NSUserDefaults *defaults = <span class="comment">[<span class="comment">[NSUserDefaults alloc]</span> init]</span>;

<span class="comment">[defaults addSuiteNamed:&lt;Group Bundle ID&gt;]</span>;
</code></pre></li>
<li><p>Get</p>
<pre><code><span class="title">[defaults persistentDomainForName:]</span><span class="comment">;</span>
</code></pre></li>
<li><p>Set</p>
<pre><code>[defaults <span class="built_in">set</span>PersistentDomain: <span class="keyword">for</span>Name:]
</code></pre></li>
</ul>
<p>关于 <em><code>NSUserDefaults</code></em>，有一篇 <a href="http://realmacsoftware.com/blog/shared-preferences-between-sandboxed-applications" target="_blank" rel="external">很 NB 的文章</a> 可以学习。</p>
<p><strong>e.g.</strong> <a href="https://github.com/wzqcongcong/MyDiskCleaner" target="_blank" rel="external">MyDiskCleaner</a></p>
<h4 id="2-_Group_Containers_目录">2. Group Containers 目录</h4><p>尽情利用吧。尽情读写吧。</p>
<p>比如用 <em><code>FSEventStreamRef</code></em> 来监控其下的某个目录，从而将该目录的变化通知到不同的 Sandbox app 。虽然这种通信方式有点原始~~</p>
<p>其实 <em><code>NSUserDefaults</code></em> 本质上就是存在于 Group Containers 里的 Preferences 目录中。</p>
<p><strong>e.g.</strong> <a href="https://github.com/wzqcongcong/MyDiskCleaner" target="_blank" rel="external">MyDiskCleaner</a></p>
<h4 id="3-_XPC">3. XPC</h4><p>是的，有了 Sandbox App Group，Sandbox app 间可以使用 XPC 了。<br>但使用方式需要有所注意。</p>
<p><strong>使用条件</strong>：</p>
<ul>
<li><p>XPC Listener 必须是位于 Helper app 中，由主 app 通过 <em><code>SMLoginItemSetEnabled</code></em> 来启动该 Helper app，从而启动 XPC Listener。</p>
</li>
<li><p>Helper app 的 Bundle ID 必须以 Group Bundle ID 作为 prefix，即 <strong><code>Helper Bundle ID</code></strong> := <group-bundle-id>.XXX</group-bundle-id></p>
</li>
<li><p>Helper app 在创建 Listener 时需要使用 <em><code>[[NSXPCListener alloc] initWithMachServiceName:]</code></em>，主 app 在创建 connection 时需要使用 <em><code>[[NSXPCConnection alloc] initWithMachServiceName:options:0]</code></em>。</p>
</li>
<li><p>XPC service name 必须等于 Helper Bundle ID。因为实际上是，在调用 <em><code>SMLoginItemSetEnabled</code></em> 启动Helper app 后，LaunchServices 自动为其注册了一个 XPC service，而 name 就是 Helper Bundle ID。</p>
</li>
</ul>
<p><strong>e.g.</strong> Apple Demo <em>“AppSandboxLoginItemXPCDemo”</em></p>
<h4 id="4-_Distributed_Objects">4. Distributed Objects</h4><p>跟 XPC 类似，对 Distributed Objects 加些特殊设置，它也可以借助 Sandbox App Group 来实现 Sandbox app 间的通信。</p>
<p><strong>使用条件</strong>：</p>
<ul>
<li><p>DOServer 端要使用 <em><code>NSMachPort</code></em> 来创建 Mach Port。</p>
</li>
<li><p>DOServer 端要使用 <em><code>[[NSConnection alloc] initWithReceivePort: sendPort:]</code></em> 来初始化 connection（以后需要对该 connection 设置 rootObject，也就是 DOClient 端能够访问的 DO），给它传递之前创建的 Mach Port。不要使用 <em><code>[NSConnection defaultConnection]</code></em>。</p>
</li>
<li><p>DOServer 端要使用 <em><code>[[NSMachBootstrapServer sharedInstance] registerPort:name:]</code></em> 来注册刚创建的 Mach Port，注册用的 name 必须以 Group Bundle ID 作为 prefix，后跟自定义的 port 名称。</p>
<p>  <strong>注意</strong>，如果 DOServer 端位于 <em><code>SMLoginItemSetEnabled</code></em> 启动的 Helper app，那么定义的 Mach Port name 不能和该 Helper app 的 Bundle ID 同名，因为其 Bundle ID 已经被 Mac 自动用于注册 XPC Service name，会导致这里的 DO Mach Port name 注册失败。</p>
</li>
<li><p>DOClient 端要使用 <em><code>[NSConnection connectionWithRegisteredName: host:nil]</code></em> 来连接 DOServer 端，注册 name 就用之前 DOServer 端设置的 Mach Port name。</p>
</li>
</ul>
<p><strong>e.g.</strong> <a href="https://github.com/wzqcongcong/MyDiskCleaner" target="_blank" rel="external">MyDiskCleaner</a></p>
<h3 id="除了_Sandbox_App_Group，还有什么？">除了 Sandbox App Group，还有什么？</h3><p>我们知道，在 iOS app 中，有 <em><code>URL Scheme</code></em> 这么个机制。如果某个 app 注册了某个特殊的 <em><code>URL Scheme</code></em>，那么其他 app 可以通过访问 URL 的形式来 launch 该 app。</p>
<p>iOS app 也是采用 Sandbox 机制的，那么在 Mac 上，该方法也是同样适用的！不管其他 app 是不是属于同一 Sandbox App Group，都可以用这种方式来 launch 该 app，并将访问的 URL 传递给该 app。而如果该 app 已经启动，那么它同样也会捕捉到被访问的 URL，从而做出响应。</p>
<ul>
<li><p>让 app 注册 URL Scheme</p>
<p>  在本 app 的 Info.plsit 中，添加一个 <em><code>URL types</code></em> array，它的每个元素代表一个 <em><code>URL Schemes</code></em> array，而该 array 的每个元素就是一个 URL Scheme，通常取一个特殊的名字，用于区别其它 app 的 URL Schemes。</p>
</li>
<li><p>监听自己注册的 URL Scheme</p>
<p>  在本 app 的 <em><code>applicationWillFinishLaunching:</code></em> delegate 函数中，利用如下代码注册一个系统 event listener：</p>
<pre><code><span class="attr_selector">[[NSAppleEventManager sharedAppleEventManager]</span> <span class="tag">setEventHandler</span><span class="pseudo">:andSelector</span><span class="pseudo">:forEventClass</span><span class="pseudo">:andEventID</span>:];
</code></pre><p>  callback 函数：</p>
<pre><code>-(<span class="typename">void</span>)<span class="string">getUrl:</span>(NSAppleEventDescriptor *)event <span class="string">withReplyEvent:</span>(NSAppleEventDescriptor*)reply
{
    NSURL *url = [NSURL <span class="string">URLWithString:</span>[[event <span class="string">paramDescriptorForKeyword:</span>keyDirectObject] stringValue]];
    ...
}
</code></pre><p>  <strong>注意</strong>：必须要在 <em><code>applicationWillFinishLaunching:</code></em> 中注册，否则通过这种方式启动 app 后，它无法获取被访问的 URL 信息。</p>
</li>
<li><p>其它 app 访问该 URL Scheme</p>
<p>  在其它 app 中，构造 URL 并访问：</p>
<pre><code><span class="attr_selector">[[NSWorkspace sharedWorkspace]</span> <span class="tag">openURL</span>:<span class="attr_selector">[[NSURL alloc]</span> <span class="tag">initWithScheme</span><span class="pseudo">:host</span><span class="pseudo">:path</span>:]];
</code></pre></li>
</ul>
<p><strong>e.g.</strong> <a href="https://github.com/wzqcongcong/MyDiskCleaner" target="_blank" rel="external">MyDiskCleaner</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>由于 Mac 对 Sandbox 的种种限制，使得 Sandb app 间的通信方式与普通 non Sandbox app 间的通信方式有所不同，普通的通信方式，如 <em><code>NSDistributedNotification</code></em>、<em><code>Distributed Objects</code></em>、 <em><code>XPC</code></em> 等不能直接套用到 Sandbox 机制上。</p>
<p>Mac 引入了 <em><code>Sandbox App Group</code></em> 的机制，使得同属于一个 app group 的不同 app 间有了合适的通信方式。</p>
<h3 id="Sandbox_App_Group_是什么">Sandbox App Group 是什么</h3><p>Sandbox App Group 表示由同一个 Developer ID 签名的 app group。每个 Developer ID 可以签名多个 Sandbox App Group，每个 Sandbox App Group 可以包含若干个 Sandbox app。</p>
<p>如果想要声明一个 Sandbox app 属于某个 Sandbox App Group，需要在该 app 的 <em><code>.entitlements</code></em> 中添加一个 <em><code>com.apple.security.application-groups</code></em> array，它的每个元素表示该 app 属于的某个 Sandbox app group，用 Group Bundle ID 表示。</p>
<p><strong><code>Group Bundle ID</code></strong> := <Team-ID>.com.company.XXX，<Team-ID> 其实也可以不用，但 Apple 的标准用法是以 <Team-ID> 作为 Group Bundle ID 的 prefix。</p>
<p>每个 Sandbox App Group 会在 <em><code>~/Library/Group Containers</code></em> 下生成一个对应的目录，以 Group Bundle ID 命名。该目录的结构与 Sandbox app 的 Container 目录结构相同。该目录可以被属于该 group 的所有 Sandbox app 访问，没有限制。访问该目录的方法是调用 <em><code>[[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:]</code></em>。</p>]]>
    
    </summary>
    
      <category term="Mac" scheme="http://gingerli.github.io/tags/Mac/"/>
    
      <category term="Sandbox" scheme="http://gingerli.github.io/tags/Sandbox/"/>
    
      <category term="开发" scheme="http://gingerli.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
